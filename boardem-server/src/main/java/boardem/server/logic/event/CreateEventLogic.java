package boardem.server.logic.event;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import boardem.server.BadgeActions;
import boardem.server.FirebaseHelper;
import boardem.server.json.Badge;
import boardem.server.json.BoardemResponse;
import boardem.server.json.Event;
import boardem.server.json.ResponseList;
import boardem.server.json.User;
import boardem.server.logic.BadgeLogic;

import com.firebase.client.DataSnapshot;
import com.firebase.client.Firebase;
import com.firebase.geofire.GeoFire;
import com.firebase.geofire.GeoLocation;

/**
 * Contains logic for creating events.
 */
public class CreateEventLogic
{
	/**
	 * Creates a new event
	 * @param event JSON data for the event to be created
	 */
	public static BoardemResponse createEvent(Event event)
	{
		Firebase rootRef = new Firebase("https://boardem.firebaseio.com");
		Firebase eventRef = rootRef.child("events").push();
		
		//Get the unique key generated by Firebase
		event.setId(eventRef.getKey());

		//Write the location of the event to GeoFire
		GeoFire geoFire = new GeoFire(rootRef.child("geofire"));
		FirebaseHelper.writeLocation(geoFire, new GeoLocation(event.getLatitude(), event.getLongitude()), event.getId());

		//Write the data to Firebase
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("event_id", event.getId());
		data.put("name", event.getName());
		data.put("lat", event.getLatitude());
		data.put("lng", event.getLongitude());
		data.put("date", event.getDate());
		data.put("owner", event.getOwner());
		data.put("participants", event.getParticipants());
		data.put("games", event.getGames());

		FirebaseHelper.writeData(eventRef, data);

		//Add the event to the owner's list
		updateUser(event.getOwner(), event.getId());
		
		//Update the user's badge progress
		List<Badge> earned = BadgeLogic.updateBadge(event.getOwner(), BadgeActions.ACTION_CREATE_EVENT);
		
		//Add the earned badges to the response
		BoardemResponse response = ResponseList.RESPONSE_SUCCESS.clone();
		for(Badge b : earned)
		{
			response.addBadge(b);
		}
		return response;
	}
	
	/**
	 * Updates the user's event list to contain the event they created 
	 */
	private static void updateUser(String userId, String eventId)
	{
		//Get the user. Find their username first
		Firebase idRef = new Firebase("https://boardem.firebaseio.com/facebook_id/" + userId);
		DataSnapshot idSnap = FirebaseHelper.readData(idRef);
		User user = User.getUserFromSnapshot(idSnap);
		
		Firebase userRef = new Firebase("https://boardem.firebaseio.com/users/" + user.getUsername());
		DataSnapshot userSnap = FirebaseHelper.readData(userRef);
		user = User.getUserFromSnapshot(userSnap);
		
		//Add the event to the user's list
		List<String> userEvents = user.getEvents();
		userEvents.add(eventId);
		
		//Write the data to Firebase
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("events", userEvents);
		FirebaseHelper.writeData(userRef, data);
	}
}
