package boardem.server.logic.event;

import java.util.HashMap;
import java.util.Map;

import boardem.server.FirebaseHelper;
import boardem.server.json.BoardemResponse;
import boardem.server.json.Event;
import boardem.server.json.ResponseList;
import boardem.server.json.User;

import com.firebase.client.DataSnapshot;
import com.firebase.client.Firebase;
import com.firebase.geofire.GeoFire;
import com.firebase.geofire.GeoLocation;

/**
 * Contains logic for creating events.
 */
public class CreateEventLogic
{
	/**
	 * Creates a new event
	 * @param event JSON data for the event to be created
	 */
	public static BoardemResponse createEvent(Event event)
	{
		Firebase rootRef = new Firebase("https://boardem.firebaseio.com");
		Firebase eventRef = rootRef.child("events").push();
		
		//Get the unique key generated by Firebase
		event.setId(eventRef.getKey());

		//Write the location of the event to GeoFire
		GeoFire geoFire = new GeoFire(rootRef.child("geofire"));
		FirebaseHelper.writeLocation(geoFire, new GeoLocation(event.getLatitude(), event.getLongitude()), event.getId());

		//Write the data to Firebase
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("event_id", event.getId());
		data.put("name", event.getName());
		data.put("lat", event.getLatitude());
		data.put("lng", event.getLongitude());
		data.put("date", event.getDate());
		data.put("owner", event.getOwner());
		data.put("participants", event.getParticipants());
		data.put("games", event.getGames());

		FirebaseHelper.writeData(eventRef, data);

		//Update the user information
		updateUser(event.getOwner(), event.getId());

		return ResponseList.RESPONSE_SUCCESS;
	}

	/**
	 * Updates the users gamification attributes for creating an event.
	 * Used in event creation.
	 * @param userId ID of user to update
	 */
	private static void updateUser(String userId, String eventId)
	{
		//Get the username from the user ID
		Firebase idRef = new Firebase("https://boardem.firebaseio.com/facebook_id/" + userId);
		DataSnapshot idSnap = FirebaseHelper.readData(idRef);

		//Get the user and update their information from the new event
		@SuppressWarnings({ "unchecked", "rawtypes" })
		Firebase userRef = new Firebase("https://boardem.firebaseio.com/users/" + ((Map<String, HashMap>) idSnap.getValue()).get("username"));
		DataSnapshot userSnap = FirebaseHelper.readData(userRef);
		User user = User.getUserFromSnapshot(userSnap);
		user.incrementEventsCreated();
		user.getEvents().add(eventId);

		//Write the data to Firebase
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("events_created", user.getEventsCreated());
		data.put("events", user.getEvents());
		FirebaseHelper.writeData(userRef, data);
	}
}
